一、简单工厂（创建型设计模式）
1、适用场景：
（1）工厂类负责创建的对象较少
（2）客户端只需要传工厂类的参数，对于如何创建对象的逻辑不需要关心
2、优点：
（1）只需传一个正确的参数，可获得对应的对象，不需知道起创建细节
3、缺点：
（1）工厂类的职责相对较重，有新的产品需修改共产类的判断逻辑，违背开闭原则
（2）不易于扩展复杂产品结构

二、工厂方法模式（创建型设计模式）
1、定义：
定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类中进行
2、适用场景：
（1）创建对象需要大量重复的代码
（2）客户端不依赖于产品类实例化如何被创建、实现等细节
（3）一个类通过其子类来指定创建哪个对象
3、优点：
（1）用户只需关心所需产品对应的工厂、无需关心创建细节
（2）加入新产品负责开闭原则、提高系统可扩展性
4、缺点：
（1）类的个数容易过多，增加代码结构复杂度
（2）增加系统抽象性和理解难度

三、抽象工厂（创建型设计模式）
1、定义：
提供创建一系列相关或相互依赖对象的接口，无需指定他们具体的类
2、适用场景：
（1）客户端不依赖于产品类实例化如何被创建、实现等细节
（2）强调一系列相关产品对象，一起使用创建对象需要大量重复的代码
（3）提供一个产品类的库，所有的产品以同样的接口实现，从而使客户端不依赖于具体实现
3、优点：
（1）具体产品在应用层代码进行隔离，无需关心创建细节
（2）将一个系列的产品族统一到一个类创建
4、缺点：
（1）产品族中扩展新的产品困难，需要修改抽象工厂的接口
（2）增加系统抽象性和理解难度






